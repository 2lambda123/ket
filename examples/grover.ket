from math import sqrt, pi
from typing import Callable


def grover(size: int, oracle: Callable, outcomes: int = 1) -> int:
    """Grover's search algorithm"""

    s = H(quant(size))

    steps = int((pi/4)*sqrt(2**size/outcomes))
    for _ in range(steps):
        oracle(s)
        with around(H, s):
            phase_on(0, s)

    return measure(s).value


if __name__ == '__main__':
    from ket import kbw
    from random import randint

    size = 12
    looking_for = randint(0, pow(2, size)-1)

    print("looking for", looking_for, "using", size, "qubits")

    kbw.use_dense()

    print('Dense Simulation: measured ', grover(size, phase_on(looking_for)))
    print('Execution time:', quantum_exec_time())

    kbw.use_sparse()
    print('Sparse Simulation: measured ', grover(size, phase_on(looking_for)))
    print('Execution time:', quantum_exec_time())
