from ket.lib import within, ctrl_int
from math import sqrt, pi
from typing import Callable

def oracle(x : quant , y : quant):
    """f(x) = 1 if x == 3 else 0

    U|x⟩|y⟩ = |x⟩|f(x) ⊕ y⟩
    """
    ctrl_int(x, 3, X, y) 

def grover(size : int, oracle : Callable, outcome : int = 1) -> int:
    """Grover's search algorithm"""

    s = H(quant(size))
    aux = H(X(quant(1)))

    steps = int((pi/4)*sqrt(2**size/outcome))
    for _ in range(steps):
        oracle(s, aux)
        within(lambda : X(H(s)),
               lambda : ctrl(s[1:], Z, s[0]))

    return measure(s).get()
    
if __name__ == '__main__':
    size = 12
    print(size+1, 'Qubits used')

    result = grover(size, oracle)
    print('Exprexted result = 3, measured:', result)
