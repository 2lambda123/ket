from math import pi, gcd, ceil, log2
from random import randint
from ket import plugins
from ket.lib import qft

p0 = 23
q0 = 19

n = p0*q0

size = ceil(log2(n+1))

print('n =', n, '({} bits)'.format(size))

done = []

for _ in range(100):
    a = randint(2, n-1)
    if gcd(n, a) != 1:
        p = gcd(n, a)
        q = n//p
        print('we got lucky')
        break
    elif not a in done:
        done.append(a)
        print('\ta =', a, end='\t')

        reg1 = quant(size)
        h(reg1)

        reg2 = plugins.pown(a, reg1, n)
        qft(reg1)

        result = dump(reg1)

        r = result.get_states()[0]
        for i in result.get_states():
            r = gcd(r, i)

        r = int(2**size/r)
        print('r =', r)
        p = gcd(pow(a, r//2, n)+1, n)
        q = gcd(pow(a, r//2, n)-1, n)
        if p*q == n and p != 1 and q != 1:
            print('a =', a)
            print('r =', r)
            break
else:
    print('Fail!')
    exit(-1)

print(n, '=', p , "x", q)
# n = 437 (9 bits)
#         a = 229 r = 2
# a = 229
# r = 2
# 437 = 23 x 19