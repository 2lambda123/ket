from typing import Callable
from ket.lib import qft
from math import pi

def phase_estimator(oracle : Callable, eigenstate : quant, precision : int) -> future:
    """Find θ for U|Ψ⟩ = e^{2*π*θ}|Ψ⟩"""
    t = quant(precision)
    H(t)
    for i, j in zip(range(precision), reversed(range(precision))):
        oracle(t[i], eigenstate, j)
    adj(qft, t)

    return measure(t)

def oracle(_phase : float, ctr : quant, trg : quant, j : int):
    """U^{⊗2^j}|Ψ⟩"""
    exp = 2**j
    ctrl(ctr, phase, 2*pi*_phase*exp, trg)

if __name__ == '__main__':
    theta = pi/10
    theta_oracle = lambda t, u, j : oracle(theta, t, u, j)

    precision = 15
    
    measurement = phase_estimator(theta_oracle, X(quant()), precision).get()
    
    result = measurement/2**precision

    print('theta  =', theta)
    print('result =', result)
    print('precision =', precision, 'qubits')
