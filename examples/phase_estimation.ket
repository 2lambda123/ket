from typing import Callable
from ket.lib import qft
from math import pi

def phase_estimator(oracle : Callable, eigenstate : quant, precision : int) -> future:
    t = quant(precision)
    h(t)
    for i, j in zip(range(precision), reversed(range(precision))):
        oracle(t[i], eigenstate, j)
    adj(qft, t)

    return measure(t)

def oracle(phase : float, t : quant, u : quant, j : int):
    exp = 2**j
    ctrl(t, u1, 2*pi*phase*exp, u)

if __name__ == '__main__':
    theta = pi/10
    theta_oracle = lambda t, u, j : oracle(theta, t, u, j)

    precision = 15

    measurement = phase_estimator(theta_oracle, ~quant(1), precision).get()
    
    result = measurement/2**precision

    print('theta  =', theta)
    print('result =', result)
    print('precision =', precision, 'qubits')
